<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE app [
 <!ENTITY name "BioAlcidae">
 <!ENTITY package "com.github.lindenb.jvarkit.tools.bioalcidae">
]>
<app xmlns="http://github.com/lindenb/jvarkit/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:h="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" app="&name;" package="&package;" __placeholder__="1"
	ui-swing="true"
	>
<description>javascript version of awk for bioinformatics</description>
<snippet id="javascript"/>
<input type="stdin-or-many"/>

<options>
	<option name="formatString" type="string" opt="F" longopt="format" label="Format" arg-name="FORMAT">
		<regex>(VCF|BAM|SAM|FASTQ|FASTA|BLAST|INSDSEQ)</regex>
		<description> force format: one of VCF BAM SAM FASTQ FASTA BLAST DBSNP. BLAST is BLAST XML version 1. DBSNP is XML output of NCBI dbsnp. INSDSEQ is XML output of NCBI EFetch rettype=gbc. </description>
	</option>
	<option name="jsonFile" type="input-file" opt="J" longopt="json" label="JSON" arg-name="JSON_FILE">
		<description>Optional. Reads a JSON File using google gson  (https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html ) and injects it as 'userData' in the javascript context.</description>
	</option>
</options>

<documentation>
Bioinformatics file javascript-based reformatter ( java engine <h:a>http://openjdk.java.net/projects/nashorn/</h:a> ). Something like awk for VCF, BAM, SAM, FASTQ, FASTA etc...


The program injects the following variables:

<h:ul>
	<h:li><h:b>out</h:b> a java.io.PrintWriter ( https://docs.oracle.com/javase/7/docs/api/java/io/PrintWriter.html ) for output</h:li>
	<h:li><h:b>FILENAME</h:b> a string, the name of the current input</h:li>
	<h:li> <h:b>format</h:b> a string, the format of the current input ("VCF"...)</h:li>
</h:ul>


<h:h4>VCF</h:h4>
For VCF , the program injects the following variables:
<h:ul>
	<h:li><h:b>header</h:b> a htsjdk.variant.vcf.VCFHeader https://samtools.github.io/htsjdk/javadoc/htsjdk/htsjdk/variant/vcf/VCFHeader.html</h:li>
	<h:li><h:b>iter</h:b> a java.util.Iterator&lt;htsjdk.variant.variantcontext.VariantContext&gt;  https://samtools.github.io/htsjdk/javadoc/htsjdk/htsjdk/variant/variantcontext/VariantContext.html</h:li>
</h:ul>

<h:h4>Fasta</h:h4>
<h:ul>
	<h:li><h:b>iter</h:b> a java.util.Iterator&lt;Fasta&gt;</h:li>   
</h:ul>

<h:pre><![CDATA[
	public class Fasta 
		{
		public String getSequence();
		public String getName();
		public void print();
		public int getSize();
		public char charAt(int i);
		}
]]></h:pre>


<h:h4>BLAST</h:h4>
<h:ul>
	<h:li><h:b>iter</h:b> a <h:b>java.util.Iterator&lt;gov.nih.nlm.ncbi.blast.Hit&gt;</h:b> . <h:b>gov.nih.nlm.ncbi.blast.Hit</h:b> is defined by the Blast Document type definition (DTD). This iterator has also a method <h:b>getIteration()</h:b> that returns the following interface:<h:pre>interface BlastIteration {
		public int getNum();
		public String getQueryId();
		public String getQueryDef();
		public int getQueryLen();
		}
	}</h:pre>
	</h:li>   
</h:ul>

<h:h4>INSDSEQ</h:h4>
<h:ul>
	<h:li><h:b>iter</h:b> a <h:b>java.util.Iterator&lt;gov.nih.nlm.ncbi.insdseq.INSDSeq&gt;</h:b> . <h:b>gov.nih.nlm.ncbi.insdseq.INSDSeq</h:b> is defined by the INSDSeq Document type definition (DTD).</h:li>   
</h:ul>


<h:h4>XML</h:h4>
<h:ul>
	<h:li><h:b>iter</h:b> a <h:b>java.util.Iterator&lt;gov.nih.nlm.ncbi.dbsnp.Rs&gt;</h:b> . <h:b>gov.nih.nlm.ncbi.dbsnp.Rs</h:b> is defined by the XSD schema http://ftp.ncbi.nlm.nih.gov/snp/specs/docsum_current.xsd</h:li>   
</h:ul>


<h:h4>BAM or SAM</h:h4>

<h:ul>
	<h:li><h:b>header</h:b> a htsjdk.samtools.SAMFileHeader http://samtools.github.io/htsjdk/javadoc/htsjdk/htsjdk/samtools/SAMFileHeader.html</h:li>
	<h:li><h:b>iter</h:b> a htsjdk.samtools.SAMRecordIterator  https://samtools.github.io/htsjdk/javadoc/htsjdk/htsjdk/samtools/SAMRecordIterator.html</h:li>
</h:ul>


<h:h4>FASTQ</h:h4>
<h:ul>
	<h:li><h:b>iter</h:b> a java.util.Iterator&lt;htsjdk.samtools.fastq.FastqRecord&gt;  https://samtools.github.io/htsjdk/javadoc/htsjdk/htsjdk/samtools/fastq/FastqRecord.html</h:li>
</h:ul>


<h:h3>Example</h:h3>
<h:h4>BAM</h:h4>
getting an histogram of the length of the reads
<h:pre><![CDATA[
L={};
while(iter.hasNext()) {
	var rec=iter.next();
	if( rec.getReadUnmappedFlag() || rec.isSecondaryOrSupplementary()) continue;
	var n= rec.getReadLength();
	if(n in L) {L[n]++;} else {L[n]=1;}
	}
for(var i in L) {
	out.println(""+i+"\t"+L[i]);
	}
]]></h:pre>

<h:h4>Fasta</h:h4>
"Creating a consensus based on 'x' number of fasta files" ( <h:a>https://www.biostars.org/p/185162/#185168</h:a>)

<h:pre><![CDATA[
$ echo -e ">A_2795\nTCAGAAAGAACCTC\n>B_10\nTCAGAAAGCACCTC\n>C_3\nTCTGAAAGCACTTC" |\
java -jar ~/src/jvarkit-git/dist/bioalcidae.jar -F fasta -e 'var consensus=[];while(iter.hasNext()) { var seq=iter.next();out.printlnseq.name+"\t"+seq.sequence);for(var i=0;i< seq.length();++i) {while(consensus.length <= i) consensus.push({}); var b = seq.charAt(i);if(b in consensus[i]) {consensus[i][b]++;} else {consensus[i][b]=1;} } } out.print("Cons.\t"); for(var i=0;i< consensus.length;i++) {var best=0,base="N"; for(var b in consensus[i]) {if(consensus[i][b]>best) { best= consensus[i][b];base=b;}} out.print(base);} out.println();' 


A_2795      TCAGAAAGAACCTC
B_10         TCAGAAAGCACCTC
C_3           TCTGAAAGCACTTC
Cons.        TCAGAAAGCACCTC
]]></h:pre>

<h:h4>VCF</h:h4>
Reformating a VCF
we want to reformat a VCF with header
<h:pre><![CDATA[
CHROM POS REF ALT GENOTYPE_SAMPLE1 GENOTYPE_SAMPLE2 ... GENOTYPE_SAMPLEN
]]></h:pre>
we use the following javascript file:

<h:pre><![CDATA[
var samples = header.sampleNamesInOrder;
out.print("CHROM\tPOS\tREF\tALT");
for(var i=0;i< samples.size();++i)
	{
	out.print("\t"+samples.get(i));
	}
out.println();

while(iter.hasNext())
	{
	var ctx = iter.next();
	if(ctx.alternateAlleles.size()!=1) continue;
	out.print(ctx.chr +"\t"+ctx.start+"\t"+ctx.reference.displayString+"\t"+ctx.alternateAlleles.get(0).displayString);
	for(var i=0;i< samples.size();++i)
		{
		var g = ctx.getGenotype(samples.get(i));

		out.print("\t");

		if(g.isHomRef())
			{
			out.print("0");
			}
		else if(g.isHomVar())
			{
			out.print("2");
			}
		else if(g.isHet())
			{
			out.print("1");
			}
		else
			{
			out.print("-9");
			}
		}
	out.println();
	}
]]></h:pre>


<h:pre><![CDATA[
$ curl -s  "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz" | \
gunzip -c | java -jar ./dist/bioalcidae.jar -f jeter.js -F vcf | head -n 5 | cut -f 1-10

CHROM	POS	REF	ALT	HG00096	HG00097	HG00099	HG00100	HG00101	HG00102
22	16050075	A	G	0	0	0	0	0	0
22	16050115	G	A	0	0	0	0	0	0
22	16050213	C	T	0	0	0	0	0	0
22	16050319	C	T	0	0	0	0	0	0
]]></h:pre>

***
for 1000 genome data, print CHROM/POS/REF/ALT/AF(europe):

<h:pre><![CDATA[
$ curl  "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5a.20130502.sites.vcf.gz" |  gunzip -c |\
java -jar dist/bioalcidae.jar  -F VCF -e 'while(iter.hasNext()) {var ctx=iter.next(); if(!ctx.hasAttribute("EUR_AF") || ctx.alternateAlleles.size()!=1) continue; out.println(ctx.chr+"\t"+ctx.start+"\t"+ctx.reference.displayString+"\t"+ctx.alternateAlleles.get(0).displayString+"\t"+ctx.getAttribute("EUR_AF"));}' 

1	10177	A	AC	0.4056
1	10235	T	TA	0
1	10352	T	TA	0.4264
1	10505	A	T	0
1	10506	C	G	0
1	10511	G	A	0
1	10539	C	A	0.001
1	10542	C	T	0
1	10579	C	A	0
1	10616	CCGCCGTTGCAAAGGCGCGCCG	C	0.994
(...)
]]></h:pre>

<h:h4>Blast</h:h4>

<h:pre><![CDATA[$ cat ~/input.blastn.xml | java -jar dist/bioalcidae.jar -F blast -e 'while(iter.hasNext())
 	{
 	var query  = iter.getIteration();
 	var hit = iter.next();
 	out.println(query.getQueryDef()+" Hit: "+hit.getHitDef()+"  num-hsp = "+hit.getHitHsps().getHsp().size());
 	}'
]]></h:pre>

output:

<h:pre><![CDATA[$
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Escherichia coli genome assembly FHI90 ,scaffold scaffold-6_contig-25.0_1_5253_[organism:Escherichia  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Acinetobacter baumannii AC12, complete genome  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Escherichia coli genome assembly FHI7 ,scaffold scaffold-5_contig-23.0_1_5172_[organism:Escherichia  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Escherichia coli genome assembly FHI92 ,scaffold scaffold-6_contig-18.0_1_5295_[organism:Escherichia  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Amycolatopsis lurida NRRL 2430, complete genome  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Escherichia coli genome assembly FHI87 ,scaffold scaffold-4_contig-19.0_1_5337_[organism:Escherichia  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Desulfitobacterium hafniense genome assembly assembly_v1 ,scaffold scaffold9  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Escherichia coli genome assembly FHI79 ,scaffold scaffold-4_contig-23.0_1_3071_[organism:Escherichia  num-hsp = 1
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Escherichia coli genome assembly FHI24 ,scaffold scaffold-8_contig-33.0_1_3324_[organism:Escherichia  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Escherichia coli genome assembly FHI89 ,scaffold scaffold-8_contig-14.0_1_3588_[organism:Escherichia  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Sphingobacterium sp. PM2-P1-29 genome assembly Sequencing method ,scaffold BN1088_Contig_19  num-hsp = 2
Enterobacteria phage phiX174 sensu lato, complete genome Hit: Escherichia coli genome assembly FHI43 ,scaffold scaffold-3_contig-14.0_1_2537_[organism:Escherichia  num-hsp = 1
(...)]]></h:pre>

<h:h4>NCBI Sequence INDSeq</h:h4>

<h:pre><![CDATA[$  curl "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&id=25,26,27&rettype=gbc" |\
java -jar dist/bioalcidae.jar  -F INSDSEQ -e 'while(iter.hasNext()) {var seq= iter.next(); out.println(seq.getINSDSeqDefinition()+" LENGTH="+seq.getINSDSeqLength());}']]></h:pre>

output:

<h:pre><![CDATA[Blue Whale heavy satellite DNA LENGTH=422
Blue Whale heavy satellite DNA LENGTH=416
B.physalus gene for large subunit rRNA LENGTH=518]]></h:pre>

<h:h4>NCBI DBSNP</h:h4>

 <h:pre><![CDATA[$  curl -s "ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/XML/ds_chMT.xml.gz" | gunzip -c |\
 java -jar dist/bioalcidae.jar  -F dbsnp -e 'while(iter.hasNext())
 	{ var rs= iter.next();
 	out.println("rs"+rs.getRsId()+" "+rs.getSnpClass()+" "+rs.getMolType());
 	}'

rs8936 snp genomic
rs9743 snp genomic
rs1015433 snp genomic
rs1029272 snp genomic
rs1029293 snp genomic
rs1029294 snp genomic
rs1041840 snp genomic
rs1041870 snp genomic
rs1064597 snp cDNA
rs1116904 snp genomic
(...)
]]></h:pre>


<h:h3>See also</h:h3>
<h:ul>
	<h:li><h:a>https://github.com/lh3/bioawk</h:a></h:li>
	<h:li><h:a>https://www.biostars.org/p/152016/</h:a></h:li>
	<h:li><h:a>https://www.biostars.org/p/152720/</h:a></h:li>
	<h:li><h:a>https://www.biostars.org/p/152820/</h:a></h:li>
	<h:li><h:a>https://www.biostars.org/p/153060/</h:a></h:li>
	<h:li><h:a>https://www.biostars.org/p/183197</h:a></h:li>
	<h:li><h:a>https://www.biostars.org/p/185162/#185168</h:a></h:li>
</h:ul>

</documentation>




<!-- __PLACEHOLDER__ --></app>
