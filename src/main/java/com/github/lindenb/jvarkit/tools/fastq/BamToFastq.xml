<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE app [
 <!ENTITY name "BamToFastq">
 <!ENTITY package "com.github.lindenb.jvarkit.tools.fastq">
]>
<app xmlns="http://github.com/lindenb/jvarkit/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:h="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" app="&name;" package="&package;" __placeholder__="1"
	generate-output-option="false"
	>
<description>Same as picard/SamToFastq but allow missing reads + shuffle reads using hash(name) so you can use them with bwa. </description>
<input type="sam"/>
<snippet id="sorting-collection"/>


<options>
	<option name="forwardFile" opt="F" longopt="forward" type="output-file">
		<description> Save fastq_R1 to file (default: stdout)</description>
	</option>
	<option name="reverseFile" opt="R" longopt="reverse" type="output-file">
		<description>  Save fastq_R2 to file (default: interlaced with forward) </description>
	</option>
	<option name="repair_missing_read" opt="r" longopt="repair" type="boolean" default="false">
		<description>repair: insert missing read</description>
	</option>
</options>


<documentation>
<h:b>Deprecated: use picard please</h:b>

Previous version was an Implementation of <h:a>https://twitter.com/DNAntonie/status/402909852277932032</h:a>



<h:h3>Warnings</h:h3>
<h:ul>
	<h:li>illumina  read is filtered is always "n"</h:li>
	<h:li>illumina control number is always 0</h:li>
	<h:li>Illumina index sequence is lost.</h:li>
</h:ul>


<h:h3>Example</h:h3>
<h:h4>piping bwa mem</h:h4>

<h:pre>
$ bwa mem -M  human_g1k_v37.fasta  Sample1_L001_R1_001.fastq.gz Sample2_S5_L001_R2_001.fastq.gz |\
  java -jar dist/bam2fastq.jar  -F tmpR1.fastq.gz -R tmpR2.fastq.gz
</h:pre>

before:
<h:pre>
$ ls -lah Sample1_L001_R1_001.fastq.gz Sample2_S5_L001_R2_001.fastq.gz
-rw-r--r-- 1 lindenb lindenb 181M Jun 14 15:20 Sample1_L001_R1_001.fastq.gz
-rw-r--r-- 1 lindenb lindenb 190M Jun 14 15:20 Sample1_L001_R2_001.fastq.gz
</h:pre>

after (these are Haloplex Data, with a lot of duplicates )
<h:pre>
$ ls -lah tmpR1.fastq.gz  tmpR2.fastq.gz
-rw-rw-r-- 1 lindenb lindenb  96M Nov 20 17:10 tmpR1.fastq.gz
-rw-rw-r-- 1 lindenb lindenb 106M Nov 20 17:10 tmpR2.fastq.gz
</h:pre>

using BZ2:
<h:pre>
$  ls -lah *.bz2
-rw-rw-r-- 1 lindenb lindenb 77M Nov 20 17:55 tmpR1.fastq.bz2
-rw-rw-r-- 1 lindenb lindenb 87M Nov 20 17:55 tmpR2.fastq.bz2
</h:pre>


check the number of reads
<h:pre>
$ gunzip -c Sample1_L001_R1_001.fastq.gz | wc -l
5824676
$ gunzip -c tmpR1.fastq.gz | wc -l
5824676
</h:pre>

verify one read

<h:pre><![CDATA[
$ gunzip -c Sample1_L001_R1_001.fastq.gz | cat -n | head -n 4
     1	@M00491:25:000000000-A46H3:1:1101:11697:2045 1:N:0:5
     2	AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACATTGGCAAATAGCATGCCGAGGTACGCTTAAAAAAAAAACGACGCGAGGCAGGGGGGGAGGAAGCAGGGGAGCAACAGGGGGAAGGGAAGGGAAGAGAAGAAGAACGAACGAAAG
     3	+
     4	AAAAAAAA1AC1FFGCGA0AFFBGAGHHFF2GBGHH0B2DBCF101111D211B////A11///B/1DE1E/>>E//?///</<><C////<?9-9-99A-;/---;---;-9--9=---------9:AF---9//:/9/:9---9-:-9-


$ gunzip -c tmpR1.fastq.gz | cat -n | grep  -A 3 -w "@M00491:25:000000000-A46H3:1:1101:11697:2045"
5771577	@M00491:25:000000000-A46H3:1:1101:11697:2045 1:N:0:1
5771578	AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACATTGGCAAATAGCATGCCGAGGTACGCTTAAAAAAAAAACGACGCGAGGCAGGGGGGGAGGAAGCAGGGGAGCAACAGGGGGAAGGGAAGGGAAGAGAAGAAGAACGAACGAAAG
5771579	+
5771580	AAAAAAAA1AC1FFGCGA0AFFBGAGHHFF2GBGHH0B2DBCF101111D211B////A11///B/1DE1E/>>E//?///</<><C////<?9-9-99A-;/---;---;-9--9=---------9:AF---9//:/9/:9---9-:-9-
]]></h:pre>


<h:h4>Example 2 from BAM</h:h4>
<h:pre>
$ java -jar dist/bam2fastq.jar \
    -F tmpR1.fastq.gz -R tmpR2.fastq.gz file.bam

(...)
-rw-r--r-- 1 lindenb lindenb 565M Nov 18 10:44 Sample_S1_L001_R1_001.fastq.gz
-rw-r--r-- 1 lindenb lindenb 649M Nov 18 10:45 Sample_S1_L001_R2_001.fastq.gz
-rw-rw-r-- 1 lindenb lindenb 470M Nov 20 16:17 tmpR1.fastq.gz.fastq.gz
-rw-rw-r-- 1 lindenb lindenb 554M Nov 20 16:17 tmpR2.fastq.gz.fastq.gz
</h:pre>


</documentation>

<arguments> </arguments>

<!-- __PLACEHOLDER__ --></app>
